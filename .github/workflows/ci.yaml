name: CI

on:
  push:
    branches: [ master ]
    paths-ignore:
      - '*.md'
      - '**/*.md'
  pull_request:
    branches: [ master ]
    paths-ignore:
      - '*.md'
      - '**/*.md'
  workflow_dispatch:
    inputs:
      triggered_by:
        description: 'Who triggered this workflow'
        required: false
        default: 'manual'

jobs:
  test:
    name: Test and Quality Checks
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        python-version: ['3.8', '3.13']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          
      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          
      - name: Run linting with pylint
        run: |
          pylint src/ --fail-under=8.0 --output-format=text
          
      - name: Run tests with coverage
        run: |
          python -m pytest tests/unit/ --cov=src --cov-report=term --cov-report=xml --cov-fail-under=80
          
      - name: Upload coverage to artifacts
        uses: actions/upload-artifact@v4
        if: matrix.python-version == '3.8'
        with:
          name: coverage-report
          path: coverage.xml
          retention-days: 30

  build:
    name: Build Executable
    runs-on: ubuntu-latest
    needs: test

    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python 3.8
        uses: actions/setup-python@v5
        with:
          python-version: '3.8'
          
      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-build-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-build-
            
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller
          # Ensure SSL/crypto libraries are available
          pip install cryptography pyOpenSSL
          
      - name: Build executable with PyInstaller
        run: |
          set -e  # Exit on any error
          pyinstaller historiador-clean.spec --clean
          # Test that executable was created
          test -f dist/historiador
          
      - name: Test executable
        run: |
          chmod +x dist/historiador
          ./dist/historiador --help
          # Test SSL functionality by checking if requests module is available
          echo "Testing SSL availability..."
          echo 'import ssl, requests; print("SSL module available")' | python
          
      - name: Upload executable
        uses: actions/upload-artifact@v4
        with:
          name: historiador-executable-${{ github.sha }}
          path: dist/historiador
          retention-days: 30
          
      - name: Upload build logs
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: build-logs-${{ github.sha }}
          path: |
            build/
            *.log
          retention-days: 7
