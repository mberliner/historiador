# GitLab CI/CD - Equivalente exacto a GitHub Actions
# Triggers: Push a master + Merge Requests + Tags
workflow:
  rules:
    - if: $CI_COMMIT_BRANCH == "master"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_TAG =~ /^v\d+\.\d+\.\d+$/

stages:
  - test
  - build
  - release

# Variables globales
variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"

# Cache global (equivalente a actions/cache@v4)
cache:
  key: "$CI_COMMIT_REF_SLUG-$CI_JOB_NAME"
  paths:
    - .cache/pip/
  policy: pull-push

# Job de Test con Matrix (equivalente a strategy: matrix)
test:
  stage: test
  parallel:
    matrix:
      - PYTHON_VERSION: ["3.8", "3.13"]
  image: python:${PYTHON_VERSION}
  
  # Equivalente a fail-fast: true
  interruptible: true
  
  # Cache específico para test
  cache:
    key: "test-pip-$PYTHON_VERSION-$CI_COMMIT_REF_SLUG"
    paths:
      - .cache/pip/
    policy: pull-push
  
  before_script:
    # Equivalente a actions/checkout@v4 (automático en GitLab)
    # Equivalente a actions/setup-python@v5
    - python --version
    - echo "Setting up Python $PYTHON_VERSION"
    
    # Equivalente a "Install dependencies"
    - python -m pip install --upgrade pip
    - pip install -r requirements.txt
    - pip install -r requirements-dev.txt
    
  script:
    # Equivalente a "Run linting with pylint"
    - echo "🔍 Running linting with pylint..."
    - pylint src/ --fail-under=8.0 --output-format=text
    
    # Equivalente a "Run tests with coverage"
    - echo "🧪 Running tests with coverage..."
    - python -m pytest tests/unit/ --cov=src --cov-report=term --cov-report=xml --cov-fail-under=80
    
  # Equivalente a "Upload coverage to artifacts" (todos los jobs generan, pero solo se usa el de 3.8)
  artifacts:
    name: "coverage-report-$PYTHON_VERSION-$CI_COMMIT_SHA"
    when: always
    expire_in: 30 days
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
    paths:
      - coverage.xml

# Job de Build (equivalente exacto)
build:
  stage: build
  image: python:3.8
  needs: 
    - test
  parallel:
    matrix:
      - OS_TYPE: "linux"
  
  # Cache específico para build
  cache:
    key: "build-pip-$CI_COMMIT_REF_SLUG"
    paths:
      - .cache/pip/
    policy: pull-push
  
  before_script:
    # Equivalente a actions/checkout@v4 (automático)
    # Equivalente a "Set up Python 3.8" 
    - python --version
    - echo "Setting up Python 3.8 for build"
    
    # Equivalente a "Install dependencies"
    - python -m pip install --upgrade pip
    - pip install -r requirements.txt
    - pip install pyinstaller
    
  script:
    # Equivalente exacto a "Build executable with PyInstaller"
    - echo "🏗️ Building executable with PyInstaller..."
    - set -e  # Exit on any error
    - pyinstaller historiador-clean.spec --clean
    # Test that executable was created
    - test -f dist/historiador
    
    # Equivalente a "Test executable"
    - echo "🧪 Testing executable..."
    - chmod +x dist/historiador
    - ./dist/historiador --help
    
  # Equivalente a "Upload executable" + "Upload build logs on failure"
  artifacts:
    name: "historiador-executable-$CI_COMMIT_SHA"
    expire_in: 6 months
    paths:
      - dist/historiador
    # Logs solo en caso de error
    when: always
  
  # Equivalente a "Upload build logs" (if: failure())
  after_script:
    - |
      if [ "$CI_JOB_STATUS" = "failed" ]; then
        echo "❌ Build failed, collecting logs..."
        mkdir -p failed-build-logs
        find . -name "*.log" -type f -exec cp {} failed-build-logs/ \; 2>/dev/null || true
        find build/ -type f -exec cp {} failed-build-logs/ \; 2>/dev/null || true
      fi

# Job de Release Automático
release_job:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  needs: 
    - job: build
      artifacts: true  # Asegurar descarga de artefactos
  
  script:
    - echo "Creating release for $CI_COMMIT_TAG"
    - ls -la dist/
    - test -f dist/historiador
    - echo "Uploading to GitLab Package Registry..."
    - curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file dist/historiador "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/historiador/${CI_COMMIT_TAG}/historiador"
    
  release:
    tag_name: '$CI_COMMIT_TAG'
    name: 'Historiador $CI_COMMIT_TAG'
    description: |
      ## 📦 Historiador $CI_COMMIT_TAG
      
      Ejecutable CLI optimizado para importar historias de usuario desde CSV/Excel a Jira.
      
      ### 🎯 Características de esta Versión
      - **Tamaño optimizado**: 51MB (excluye herramientas de desarrollo)  
      - **Compatibilidad**: Linux x64
      - **Testeado en**: Python 3.8 y 3.13
      - **Arquitectura**: Clean Architecture (4 capas)
      
      ### ✅ Quality Gates Validados
      - **PyLint Score**: ≥8.0 (código de calidad)
      - **Test Coverage**: ≥80% (cobertura de tests)  
      - **Unit Tests**: Todos los tests pasando (366+ tests)
      - **Build**: Ejecutable generado y validado
      
      ### 📋 Información del Pipeline
      - **Commit**: `$CI_COMMIT_SHA`
      - **Pipeline**: [$CI_PIPELINE_ID]($CI_PIPELINE_URL)
      - **Fecha Build**: $CI_PIPELINE_CREATED_AT
      - **Generado por**: GitLab CI/CD
      
      ### 🔧 Uso
      ```bash
      # Descargar y usar
      chmod +x historiador
      ./historiador --help
      ./historiador -p TU_PROYECTO --dry-run
      ```
      
      ### 📚 Documentación
      - [README.md](README.md): Guía de inicio rápido
      - [DOCS.md](DOCS.md): Documentación completa  
      - [BUILD_OPTIMIZATION.md](BUILD_OPTIMIZATION.md): Detalles de optimización
    assets:
      links:
        - name: 'historiador'
          url: '${CI_PROJECT_URL}/-/packages/generic/historiador/${CI_COMMIT_TAG}/historiador'
          link_type: 'package'
  rules:
    - if: $CI_COMMIT_TAG =~ /^v\d+\.\d+\.\d+$/
      when: on_success
    - when: never