# GitLab CI/CD - Equivalente exacto a GitHub Actions
# Triggers: Push a master + Merge Requests + Tags
workflow:
  rules:
    # SIEMPRE ejecutar para tags (independiente de archivos modificados)
    - if: $CI_COMMIT_TAG =~ /^v\d+\.\d+\.\d+$/
      when: always
    # Excluir cambios solo en documentación para branches (NO para tags)
    - changes:
        - "**.md"
        - "docs/**"
        - ".gitignore"
        - "LICENSE"
      when: never
    # Incluir otros casos (branches y MRs)
    - if: $CI_COMMIT_BRANCH == "master"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

stages:
  - test
  - build
  - package
  - release

# Variables globales
variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"

# Cache global (equivalente a actions/cache@v4)
cache:
  key: "$CI_COMMIT_REF_SLUG-$CI_JOB_NAME"
  paths:
    - .cache/pip/
  policy: pull-push

# Job de Test con Matrix (equivalente a strategy: matrix)
test:
  stage: test
  parallel:
    matrix:
      - PYTHON_VERSION: ["3.8", "3.13"]
  image: python:${PYTHON_VERSION}
  
  # Equivalente a fail-fast: true
  interruptible: true
  
  # Cache específico para test
  cache:
    key: "test-pip-$PYTHON_VERSION-$CI_COMMIT_REF_SLUG"
    paths:
      - .cache/pip/
    policy: pull-push
  
  before_script:
    # Equivalente a actions/checkout@v4 (automático en GitLab)
    # Equivalente a actions/setup-python@v5
    - python --version
    - echo "Setting up Python $PYTHON_VERSION"
    
    # Equivalente a "Install dependencies"
    - python -m pip install --upgrade pip
    - pip install -r requirements.txt
    - pip install -r requirements-dev.txt
    
  script:
    # Equivalente a "Run linting with pylint"
    - echo "🔍 Running linting with pylint..."
    - pylint src/ --fail-under=8.0 --output-format=text
    
    # Equivalente a "Run tests with coverage"
    - echo "🧪 Running tests with coverage..."
    - python -m pytest tests/unit/ --cov=src --cov-report=term --cov-report=xml --cov-fail-under=80
    
  # Equivalente a "Upload coverage to artifacts" (todos los jobs generan, pero solo se usa el de 3.8)
  artifacts:
    name: "coverage-report-$PYTHON_VERSION-$CI_COMMIT_SHA"
    when: always
    expire_in: 30 days
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
    paths:
      - coverage.xml

# Job de Build (equivalente exacto)
build:
  stage: build
  image: python:3.8
  needs: 
    - test
  parallel:
    matrix:
      - OS_TYPE: "linux"
  
  # Cache específico para build
  cache:
    key: "build-pip-$CI_COMMIT_REF_SLUG"
    paths:
      - .cache/pip/
    policy: pull-push
  
  before_script:
    # Equivalente a actions/checkout@v4 (automático)
    # Equivalente a "Set up Python 3.8" 
    - python --version
    - echo "Setting up Python 3.8 for build"
    
    # Equivalente a "Install dependencies"
    - python -m pip install --upgrade pip
    - pip install -r requirements.txt
    - pip install pyinstaller
    
  script:
    # Equivalente exacto a "Build executable with PyInstaller"
    - echo "🏗️ Building executable with PyInstaller..."
    - set -e  # Exit on any error
    - pyinstaller historiador-clean.spec --clean
    # Test that executable was created
    - test -f dist/historiador
    
    # Equivalente a "Test executable"
    - echo "🧪 Testing executable..."
    - chmod +x dist/historiador
    - ./dist/historiador --help
    
  # Equivalente a "Upload executable" + "Upload build logs on failure"
  artifacts:
    name: "historiador-executable-$CI_COMMIT_SHA"
    expire_in: 6 months
    paths:
      - dist/historiador
    # Logs solo en caso de error
    when: always
  
  # Equivalente a "Upload build logs" (if: failure())
  after_script:
    - |
      if [ "$CI_JOB_STATUS" = "failed" ]; then
        echo "❌ Build failed, collecting logs..."
        mkdir -p failed-build-logs
        find . -name "*.log" -type f -exec cp {} failed-build-logs/ \; 2>/dev/null || true
        find build/ -type f -exec cp {} failed-build-logs/ \; 2>/dev/null || true
      fi

# Job para subir al Package Registry
upload_package:
  stage: package
  image: curlimages/curl:latest
  needs: 
    - job: build
      artifacts: true
  
  variables:
    PACKAGE_URL: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/historiador/${CI_COMMIT_TAG}/historiador"
    
  script:
    - echo "=== UPLOAD DIAGNOSTICS ==="
    - echo "File to upload:"
    - ls -la dist/historiador
    - echo "Target URL:" ${PACKAGE_URL}
    - echo "Job Token:" ${CI_JOB_TOKEN:0:20}...
    - echo ""
    - echo "=== STARTING UPLOAD ==="
    - curl -v -H JOB-TOKEN:${CI_JOB_TOKEN} --upload-file dist/historiador ${PACKAGE_URL}
    - echo ""
    - echo "=== VERIFYING UPLOAD ==="
    - sleep 3
    - curl -I --fail -H JOB-TOKEN:${CI_JOB_TOKEN} ${PACKAGE_URL}
    - echo ""
    - echo "=== UPLOAD COMPLETE ==="
  
  rules:
    - if: $CI_COMMIT_TAG =~ /^v\d+\.\d+\.\d+$/
      when: on_success
    - when: never

# Job de Release Automático
release_job:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  needs:
    - upload_package

  script:
    - echo "Creating release for $CI_COMMIT_TAG"

    # Validar que existe entrada en CHANGELOG.md
    - |
      echo "🔍 Validando entrada en CHANGELOG.md para tag: $CI_COMMIT_TAG"
      VERSION=${CI_COMMIT_TAG#v}

      # Verificar que existe la entrada en el changelog
      if ! grep -q "^## \[$VERSION\]" CHANGELOG.md; then
        echo "❌ ERROR: No se encontró entrada para la versión [$VERSION] en CHANGELOG.md"
        echo ""
        echo "📋 Acciones requeridas:"
        echo "1. Agregar sección para la versión $VERSION en CHANGELOG.md"
        echo "2. Seguir el formato: ## [$VERSION] - $(date +%Y-%m-%d)"
        echo "3. Incluir categorías apropiadas (🎉 Added, 🔧 Changed, 🐛 Fixed, etc.)"
        echo ""
        echo "📖 Ejemplo:"
        echo "## [$VERSION] - $(date +%Y-%m-%d)"
        echo ""
        echo "### 🎉 Added"
        echo "- Nueva funcionalidad..."
        echo ""
        echo "### 🐛 Fixed"
        echo "- Corrección de..."
        echo ""
        echo "Ver CHANGELOG.md para más ejemplos de formato."
        echo ""
        echo "💡 Tip: Asegúrate de que el tag $CI_COMMIT_TAG corresponde a los cambios documentados"
        echo ""
        echo "🚫 Release cancelado - CHANGELOG.md debe actualizarse antes de continuar"
        exit 1
      fi

      # Verificar que hay contenido en la sección (no está vacía)
      CHANGELOG_CONTENT=$(awk "/^## \[$VERSION\]/{flag=1; next} /^## \[/{flag=0} flag" CHANGELOG.md | sed '/^$/d')

      if [ -z "$CHANGELOG_CONTENT" ]; then
        echo "❌ ERROR: La sección [$VERSION] en CHANGELOG.md está vacía"
        echo ""
        echo "📋 Acción requerida:"
        echo "- Agregar contenido descriptivo de los cambios en la versión $VERSION"
        echo "- Usar categorías apropiadas (🎉 Added, 🔧 Changed, 🐛 Fixed, etc.)"
        echo ""
        echo "🚫 Release cancelado - Sección del changelog no puede estar vacía"
        exit 1
      fi

      echo "✅ Validación exitosa: Entrada encontrada para versión [$VERSION]"
      echo "📝 Contenido del changelog validado correctamente"

    # Extraer contenido del changelog y crear release description
    - |
      echo "🔍 Extracting changelog content for $CI_COMMIT_TAG..."
      VERSION=${CI_COMMIT_TAG#v}

      # Buscar contenido de la versión actual en CHANGELOG.md (ya validado que existe)
      CHANGELOG_CONTENT=$(awk "/^## \[$VERSION\]/{flag=1; next} /^## \[/{flag=0} flag" CHANGELOG.md | sed '/^$/d')

      echo "📊 Estadísticas del changelog:"
      echo "- Líneas de cambios: $(echo "$CHANGELOG_CONTENT" | wc -l)"
      echo "- Categorías detectadas: $(echo "$CHANGELOG_CONTENT" | grep -c "^###" || echo "0")"

      # Crear la descripción completa del release
      cat > release_description.md << 'EOF'
      ## 📦 Historiador $CI_COMMIT_TAG

      Ejecutable CLI optimizado para importar historias de usuario desde CSV/Excel a Jira.

      ### 🚀 Cambios en esta versión

      EOF

      # Agregar el contenido del changelog
      echo "$CHANGELOG_CONTENT" >> release_description.md

      # Agregar el resto de la descripción
      cat >> release_description.md << 'EOF'

      ### 📥 Descargas
      - **Linux x64**: [historiador]($CI_API_V4_URL/projects/$CI_PROJECT_ID/packages/generic/historiador/$CI_COMMIT_TAG/historiador) (~51MB optimizado)

      ### ✅ Quality Gates Validados
      - **PyLint Score**: ≥8.0 (código de calidad)
      - **Test Coverage**: ≥80% (cobertura de tests)
      - **Unit Tests**: Todos los tests pasando (366+ tests)
      - **Build**: Ejecutable generado y validado

      ### 📋 Información del Pipeline
      - **Tag**: `$CI_COMMIT_TAG`
      - **Commit**: `$CI_COMMIT_SHA`
      - **Pipeline**: [$CI_PIPELINE_ID]($CI_PIPELINE_URL)
      - **Fecha Build**: $CI_PIPELINE_CREATED_AT
      - **Generado por**: GitLab CI/CD
      - **Arquitectura**: Clean Architecture (4 capas)
      - **Compatibilidad**: Python 3.8+ / Linux x64

      ### 🔧 Uso Rápido
      ```bash
      # Descargar y usar
      curl -H "JOB-TOKEN: $CI_JOB_TOKEN" -L "$CI_API_V4_URL/projects/$CI_PROJECT_ID/packages/generic/historiador/$CI_COMMIT_TAG/historiador" -o historiador
      chmod +x historiador
      ./historiador --help
      ./historiador -p TU_PROYECTO --dry-run
      ```

      ### 📚 Documentación
      - [README.md](README.md): Guía de inicio rápido
      - [DOCS.md](DOCS.md): Documentación completa del proyecto
      - [CHANGELOG.md](CHANGELOG.md): Historial completo de cambios
      EOF

      echo "📝 Release description created:"
      cat release_description.md

  release:
    tag_name: '$CI_COMMIT_TAG'
    name: 'Historiador $CI_COMMIT_TAG'
    description_path: 'release_description.md'
    assets:
      links:
        - name: 'historiador'
          url: '${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/historiador/${CI_COMMIT_TAG}/historiador'
          link_type: 'package'
  rules:
    - if: $CI_COMMIT_TAG =~ /^v\d+\.\d+\.\d+$/
      when: on_success
    - when: never
